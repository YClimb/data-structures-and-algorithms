package algorithm;

/**
 * 贪心算法
 *
 * @author yclimb
 * @date 2020/9/17
 */
public class GreedyAlgorithm {
    public static void main(String[] args) {
        /**
         * https://time.geekbang.org/column/article/73188
         * 贪心算法（greedy algorithm）
         *
         * 第一步，当我们看到这类问题的时候，首先要联想到贪心算法：针对一组数据，我们定义了限制值和期望值，希望从中选出几个数据，在满足限制值的情况下，期望值最大。
         * 第二步，我们尝试看下这个问题是否可以用贪心算法解决：每次选择当前情况下，在对限制值同等贡献量的情况下，对期望值贡献最大的数据。
         * 第三步，我们举几个例子看下贪心算法产生的结果是否是最优的。
         *
         * 贪心算法有很多经典的应用，比如霍夫曼编码（Huffman Coding）、Prim 和 Kruskal 最小生成树算法、还有 Dijkstra 单源最短路径算法。
         *
         * 霍夫曼编码:
         * 霍夫曼编码是一种十分有效的编码方法，广泛用于数据压缩中，其压缩率通常在 20%～90% 之间。
         * 霍夫曼编码不仅会考察文本中有多少个不同字符，还会考察每个字符出现的频率，根据频率的不同，选择不同长度的编码。
         * 霍夫曼编码试图用这种不等长的编码方法，来进一步增加压缩的效率。
         *
         * 如何给不同频率的字符选择不同长度的编码呢？
         * 根据贪心的思想，我们可以把出现频率比较多的字符，用稍微短一些的编码；出现频率比较少的字符，用稍微长一些的编码。
         *
         */
    }
}
