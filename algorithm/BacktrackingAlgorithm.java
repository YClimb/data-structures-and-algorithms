package algorithm;

/**
 * 回溯算法
 *
 * @author yclimb
 * @date 2020/9/17
 */
public class BacktrackingAlgorithm {
    public static void main(String[] args) {
        /**
         * https://time.geekbang.org/column/article/74287
         * 回溯算法（Backtracking Algorithm）
         * 回溯的处理思想，有点类似枚举搜索。我们枚举所有的解，找到满足期望的解。
         * 为了有规律地枚举所有可能的解，避免遗漏和重复，我们把问题求解的过程分为多个阶段。
         * 每个阶段，我们都会面对一个岔路口，我们先随意选一条路走，当发现这条路走不通的时候（不符合期望的解），就回退到上一个岔路口，另选一种走法继续走。
         *
         * 笼统地讲，回溯算法很多时候都应用在“搜索”这类问题上。
         * 不过这里说的搜索，并不是狭义的指我们前面讲过的图的搜索算法，而是在一组可能的解中，搜索满足期望的解。
         *
         * 深度优先搜索算法利用的是回溯算法思想。这个算法思想非常简单，但是应用却非常广泛。
         * 它除了用来指导像深度优先搜索这种经典的算法设计之外，还可以用在很多实际的软件开发场景中，比如正则表达式匹配、编译原理中的语法分析等。
         * 很多经典的数学问题都可以用回溯算法解决，比如数独、八皇后、0-1 背包、图的着色、旅行商问题、全排列等等。
         *
         */
    }
}
