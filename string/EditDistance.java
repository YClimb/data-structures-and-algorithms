package string;

/**
 * 编辑距离
 *
 * @author yclimb
 * @date 2020/9/17
 */
public class EditDistance {
    public static void main(String[] args) {
        /**
         * https://time.geekbang.org/column/article/75794
         * 编辑距离（Edit Distance）
         *
         * 当你在搜索框中，一不小心输错单词时，搜索引擎会非常智能地检测出你的拼写错误，并且用对应的正确单词来进行搜索。
         * 作为一名软件开发工程师，你是否想过，这个功能是怎么实现的呢？
         *
         * 如何量化两个字符串的相似度？
         * 计算机只认识数字，所以要解答开篇的问题，我们就要先来看，如何量化两个字符串之间的相似程度呢？
         * 有一个非常著名的量化方法，那就是编辑距离（Edit Distance）。
         * 顾名思义，编辑距离指的就是，将一个字符串转化成另一个字符串，需要的最少编辑操作次数（比如增加一个字符、删除一个字符、替换一个字符）。
         * 编辑距离越大，说明两个字符串的相似程度越小；相反，编辑距离就越小，说明两个字符串的相似程度越大。对于两个完全相同的字符串来说，编辑距离就是 0。
         *
         * 编辑距离有多种不同的计算方式，比较著名的有莱文斯坦距离（Levenshtein distance）和最长公共子串长度（Longest common substring length）。
         * 其中，莱文斯坦距离允许增加、删除、替换字符这三个编辑操作，最长公共子串长度只允许增加、删除字符这两个编辑操作。
         * 而且，莱文斯坦距离和最长公共子串长度，从两个截然相反的角度，分析字符串的相似程度。
         * 莱文斯坦距离的大小，表示两个字符串差异的大小；而最长公共子串的大小，表示两个字符串相似程度的大小。
         *
         */
    }
}
