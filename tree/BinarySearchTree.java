package tree;

/**
 * 二叉查找树/二叉搜索树/二叉排序树
 *
 * @author yclimb
 * @date 2020/9/9
 */
public class BinarySearchTree {
    public static void main(String[] args) {
        /**
         * https://time.geekbang.org/column/article/68334
         * https://github.com/wangzheng0822/algo/tree/master/java/24_tree
         * 二叉查找树是二叉树中最常用的一种类型，也叫二叉搜索树。
         * 顾名思义，二叉查找树是为了实现快速查找而生的。不过，它不仅仅支持快速查找一个数据，还支持快速插入、删除一个数据。
         *
         * 二叉查找树要求，在树中的任意一个节点，其左子树中的每个节点的值，都要小于这个节点的值，而右子树节点的值都大于这个节点的值。
         *
         * 1.二叉查找树的查找操作
         * 首先，我们看如何在二叉查找树中查找一个节点。我们先取根节点，如果它等于我们要查找的数据，那就返回。
         * 如果要查找的数据比根节点的值小，那就在左子树中递归查找；如果要查找的数据比根节点的值大，那就在右子树中递归查找。
         *
         * 2.二叉查找树的插入操作
         * 我们只需要从根节点开始，依次比较要插入的数据和节点的大小关系。
         * 如果要插入的数据比节点的数据大，并且节点的右子树为空，就将新数据直接插到右子节点的位置；
         * 如果不为空，就再递归遍历右子树，查找插入位置。
         * 同理，如果要插入的数据比节点数值小，并且节点的左子树为空，就将新数据插入到左子节点的位置；
         * 如果不为空，就再递归遍历左子树，查找插入位置。
         *
         * 3.二叉查找树的删除操纵
         * 第一种情况是，如果要删除的节点没有子节点，我们只需要直接将父节点中，指向要删除节点的指针置为 null。
         * 第二种情况是，如果要删除的节点只有一个子节点（只有左子节点或者右子节点），我们只需要更新父节点中，指向要删除节点的指针，让它指向要删除节点的子节点就可以了。
         * 第三种情况是，如果要删除的节点有两个子节点，这就比较复杂了。我们需要找到这个节点的右子树中的最小节点，把它替换到要删除的节点上。然后再删除掉这个最小节点，因为最小节点肯定没有左子节点（如果有左子结点，那就不是最小节点了），所以，我们可以应用上面两条规则来删除这个最小节点。
         * 实际上，关于二叉查找树的删除操作，还有个非常简单、取巧的方法，就是单纯将要删除的节点标记为“已删除”，但是并不真正从树中将这个节点去掉。这样原本删除的节点还需要存储在内存中，比较浪费内存空间，但是删除操作就变得简单了很多。而且，这种处理方法也并没有增加插入、查找操作代码实现的难度。
         *
         * 二叉排序树
         * 中序遍历二叉查找树，可以输出有序的数据序列，时间复杂度是 O(n)，非常高效。
         *
         */


    }
}
