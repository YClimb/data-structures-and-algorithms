package tree;

/**
 * B+树：mysql 索引
 *
 * @author yclimb
 * @date 2020/9/23
 */
public class BPlusTree {
    public static void main(String[] args) {
        /**
         * https://time.geekbang.org/column/article/77830
         *
         * 数据库索引是如何实现的呢？底层使用的是什么数据结构和算法呢？
         *
         * B+树：
         * 1.二叉树的特点上改进为M叉树，也就是多叉树
         * 2.操作系统都是按页（一页大小通常是 4KB，这个值可以通过 getconfig PAGE_SIZE 命令查看）来读取的，一次会读一页的数据。如果要读取的数据量超过一页的大小，就会触发多次 IO 操作。所以，我们在选择 m 大小的时候，要尽量让每个节点的大小等于一个页的大小。读取一个节点，只需要一次磁盘 IO 操作。
         * 3.插入数据时，如果当前子节点的个数超过m，这时候节点大小就大于一个页的大小，所以需要分裂为两个子节点，如果父节点页超过m个，继续分裂，继续及联到根节点为止；
         * 4.删除数据时，如果删除后节点变少会影响效率，那我们设置一个阈值，在 B+ 树中，这个阈值等于 m/2。如果某个节点的子节点个数小于 m/2，我们就将它跟相邻的兄弟节点合并。不过，合并之后节点的子节点个数有可能会超过 m。针对这种情况，我们可以借助插入数据时候的处理方法，再分裂节点。
         *
         * B+ 树的特点：
         * 1.每个节点中子节点的个数不能超过 m，也不能小于 m/2；
         * 2.根节点的子节点个数可以不超过 m/2，这是一个例外；
         * 3.m 叉树只存储索引，并不真正存储数据，这个有点儿类似跳表；
         * 4.通过链表将叶子节点串联在一起，这样可以方便按区间查找；
         * 5.一般情况，根节点会被存储在内存中，其他节点存储在磁盘中。
         *
         * B- 树就是 B 树，英文翻译都是 B-Tree，这里的“-”并不是相对 B+ 树中的“+”，而只是一个连接符。这个很容易误解。
         * 而 B 树实际上是低级版的 B+ 树，或者说 B+ 树是 B 树的改进版。B 树跟 B+ 树的不同点主要集中在这几个地方：
         * 1.B+ 树中的节点不存储数据，只是索引，而 B 树中的节点存储数据；
         * 2.B 树中的叶子节点并不需要链表来串联。
         * 也就是说，B 树只是一个每个节点的子节点个数不能小于 m/2 的 m 叉树。
         *
         *
         * 你有没有发现，B+ 树的结构和操作，跟跳表非常类似。
         * 理论上讲，对跳表稍加改造，也可以替代 B+ 树，作为数据库的索引实现的。
         * B+ 树发明于 1972 年，跳表发明于 1989 年，我们可以大胆猜想下，跳表的作者有可能就是受了 B+ 树的启发，才发明出跳表来的。不过，这个也无从考证了。
         *
         */
    }
}
