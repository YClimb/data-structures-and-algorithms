package sort;

/**
 * 拓扑排序
 *
 * @author yclimb
 * @date 2020/9/17
 */
public class TopologicalSort {
    public static void main(String[] args) {
        /**
         * https://time.geekbang.org/column/article/76207
         * 拓扑排序（Topological Sort）
         * 经典算法“拓扑排序算法”与“图”这种数据结构有关，本身就是基于有向无环图的一个算法。
         * 拓扑排序应用非常广泛，解决的问题的模型也非常一致。凡是需要通过局部顺序来推导全局顺序的，一般都能用拓扑排序来解决。
         *
         * 拓扑排序有两种实现方法，都不难理解。它们分别是 Kahn 算法和 DFS 深度优先搜索算法。
         *
         * 1.Kahn 算法
         * Kahn 算法实际上用的是贪心算法思想。
         * 我们先从图中，找出一个入度为 0 的顶点，将其输出到拓扑排序的结果序列中（对应代码中就是把它打印出来），并且把这个顶点从图中删除（也就是把这个顶点可达的顶点的入度都减 1）。
         * 我们循环执行上面的过程，直到所有的顶点都被输出。最后输出的序列，就是满足局部依赖关系的拓扑排序。
         *
         *
         * 2.DFS 深度优先搜索算法
         * 这里是深度优先遍历，遍历图中的所有顶点，而非只是搜索一个顶点到另一个顶点的路径。
         * 第一部分是通过邻接表构造逆邻接表。
         * 第二部分是这个算法的核心，也就是递归处理每个顶点。对于顶点 vertex 来说，我们先输出它可达的所有顶点，也就是说，先把它依赖的所有的顶点输出了，然后再输出自己。
         *
         *
         */
    }
}
